var _ = require('underscore'),
    util = require('util'),
    EventEmitter = require('eventemitter2').EventEmitter2,
    cardPrototypes = [];

var Card = function() {
};

util.inherits(Card, EventEmitter);

_(Card.prototype).extend({
    play: function() {
        this.emit('done');
    },

    onPhaseComplete: function() {
        //noop
    }
});

var makeCard = function(id, name, proto) {
    if (arguments.length === 2) {
        proto = name;
    }

    var result = function(player, game) {
        this._player = player;
        this._game = game;
        this._id = name || id;
    };

    Card[id] = result;
    cardPrototypes.push(result);
    util.inherits(result, Card);
    _(result.prototype).extend(proto);

    return result;
};

makeCard('Messenger', {
    play: function() {
        Treasury.transfer(this._game.treasury, this._player.resources, {money: 8});
        Card.prototype.play.call(this);
    }
});

makeCard('Trader', {
    play: function() {
        this._game.allowToPlaceTrader(this._player);
        this._player.once('place.trader', function(place) {
            if (this._player.hasServants() && (place !== 'silver' || this._game.silverTraderIsAllowed())) {
                this._game.placeTrader(this._player, place);
                Card.prototype.play.call(this);
            } else {
                //try again
                this.play();
            }
        }.bind(this));
    },
    onPhaseComplete: function() {
    }
});

[
    'Bricklayer',
    'Stonemason',
    'Worker',
    'MasterBuilder'
].forEach(function(name) {
    makeCard(name);
});

makeCard('Worker2', 'Worker');
makeCard('Worker3', 'Worker');


_(Card).extend({
    createCardsForPlayer: function(player, game) {
        return cardPrototypes.map(function(CardConstructor) {
            return new CardConstructor();
        });
    }
});

module.exports = Card;
