var _ = require('underscore'),
    util = require('util'),
    EventEmitter = require('eventemitter2').EventEmitter2,
    Card = require('logic/Card/Card'),
    cardsOrder = [
        Card.Messenger,
        Card.Trader,
        Card.Bricklayer,
        Card.Stonemason,
        Card.Worker,
        Card.MasterBuilder
    ];

/**
 * Game Round
 * @constructor
 * @param {Object} config
 * @param {Number} roundNum
 * @param {GameParticipants} config.participants
 */
var Round = function(config) {
    this.roundNumber = config.roundNumber;
    this.players = config.participants.playersSequence(config.roundNumber);
    this.cards = [];

    this._bindListners();
};

var PlayerCard = function(player, card) {
    this.player = player;
    this.card = card;
};

_(PlayerCard.prototype).extend({
    play: function() {
        this.card.play.apply(this.card, [this.player].concat(arguments));
    }
});

_(Round.prototype).extend({
    getRoundNumber: function() {
        return this.roundNumber;
    },

    _bindListners: function() {
        this.players.forEach(function(player) {
            player.player.once('card.picked', this._onCardPicked.bind(this, player));
        }, this);
    },

    _onCardPicked: function(player, card) {
        if (card.is(Card.MasterBuilder) && player.getPlayedCards().length === 0) {
            this.emit('cardPick.error', {message: 'master builder can not be played as first card'});
            return;
        }

        this.cards.push(new PlayerCard({
            player: player,
            card: card
        }));
    },

    cardsSequence: function() {
        return _.sortBy(this.cards, function(playerCard){
            var playerIndex = _.indexOf(this.players, playerCard.player),
                cardIndex = _.indexOf(cardsOrder, playerCard.card);

            return cardIndex * 10 + playerIndex;
        }, this);
    },

    nextCardSet: function() {
        if (!this._orderedCards) {
            this._orderedCards = this.cardsSequence();
        }
        return this._orderedCards.pop();
    }
});

module.exports = Round;
