var vows = require('vows'),
    sinon = require('sinon'),
    assert = require('assert'),
    chai = require('chai'),
    _ = require('underscore'),
    GameParticipants = require('./GameParticipants'),
    Player = require('logic/player/Player');

vows.describe('GameParticipants').addBatch({
    'joining': {
        'should allow players to join': function() {
            var game = new GameParticipants({
                    maxPlaces: 2
                }),
                player1 = new Player();

            sinon.spy(game, 'emit');

            game.join(player1);
            assert(game.emit.calledOnce);
            assert.equal(game.emit.getCall(0).args[0], 'participant.joined');
        },

        'should tell that all places have been filled when it so': function() {
            var game = new GameParticipants({
                    maxPlaces: 2
                }),
                player1 = new Player(),
                player2 = new Player();

            sinon.spy(game, 'emit');

            game.join(player1);
            game.join(player2);

            assert.equal(game.emit.getCall(2).args[0], 'participants.filled');
        },

        'should not allow players to join if game is full': function() {
            var game = new GameParticipants({
                    maxPlaces: 2
                }),
                player1 = new Player(),
                player2 = new Player(),
                player3 = new Player();

            game.join(player1);
            game.join(player2);

            sinon.spy(game, 'emit');

            game.join(player3);

            assert(game.emit.calledOnce);
            assert.equal(game.emit.getCall(0).args[0], 'participants.full');
        }
    },
    'players sequence': {
        topic: (function(){
            var game = new GameParticipants({maxPlayer: 3}),
                player1 = new Player(),
                player2 = new Player(),
                player3 = new Player();

            //to make eql be able to distinct players
            player1._id = 1;
            player2._id = 2;
            player3._id = 3;

            game.join(player1);
            game.join(player2);
            game.join(player3);

            return {
                game: game,
                player1: player1,
                player2: player2,
                player3: player3
            };
        }()),
        'for first round sequence should be: first, second, third': function(data) {
            var sequence = data.game.playersSequence(0).map(function(player) {
                return player.player;
            });
            chai.expect(sequence).to.eql([data.player1, data.player2, data.player3]);
        },
        'for second round sequence should be: second, third, first': function(data) {
            var sequence = data.game.playersSequence(1).map(function(player) {
                return player.player;
            });
            chai.expect(sequence).to.eql([data.player2, data.player3, data.player1]);
        },
        'for thids round sequence should be: third, first, second': function(data) {
            var sequence = data.game.playersSequence(2).map(function(player) {
                return player.player;
            });
            chai.expect(sequence).to.eql([data.player3, data.player1, data.player2]);
        }
    }
}).export(module);
