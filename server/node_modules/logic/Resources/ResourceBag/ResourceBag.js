var _ = require('underscore'),
    util = require('util'),
    EventEmitter = require('eventemitter2').EventEmitter2;

var resources = [
        {
            name: 'sand',
            price: 1
        },
        {
            name: 'wood',
            price: 2
        },
        {
            name: 'brick',
            price: 4
        },
        {
            name: 'stone',
            price: 5
        },
        {
            name: 'silver'
        },
        {
            name: 'money'
        }
    ],
    Resource = {
        names: resources.map(r => r.name),
        prices: resources.filter(r => r.price).map(r => r.price),
        namesToPrices: resources.reduce(function(acc, r) {
            acc[r.name] = r.price;
            return acc;
        }, {}),
        pricesToNames: resources.reduce(function(acc, r) {
            acc[r.price] = r.name;
            return acc;
        }, {})
    };

var ResourceBag = function (config) {
    config = config || {};
    Resource.names.forEach(function(item) {
        this[item] = config[item] || 0;
    }, this);
};

util.inherits(ResourceBag, EventEmitter);

var singleValues = Resource.prices.sort(function(a, b){return b - a;}),
    hasAtLeastThreeDifferentValues = function(variant) {
        return Object.keys(variant.reduce(function(res, v) {
            res[v] = true;
            return res;
        }, {})).length >= 3;
    };

function getVariantsInner(price, variant, variants, lastValue) {
    if (price === 0 && hasAtLeastThreeDifferentValues(variant)) {
        variants.push(variant);
    } else {
        singleValues.filter(function(value) {
            return value <= price && value <= lastValue;
        }).forEach(function(value) {
            getVariantsInner(price - value, variant.slice().concat(value), variants, value);
        });
    }
    return variants;
}

_(ResourceBag).extend({
    getVariants: function(price) {
        return getVariantsInner(price, [], [], singleValues[0]);
    }
});

_(ResourceBag.prototype).extend({
    transfer: function(to, schema) {
        if (this._enough(schema)){
            var confirmedSchema = this._get(schema);

            to._receive(confirmedSchema);
        } else {
            this.emit('error', {});
        }
    },

    _receive: function(schema) {
        _(schema).pairs().forEach(function(pair) {
            var key = pair[0],
                value = pair[1];

            this[key] += value;
        }, this);
    },

    _get: function(schema) {
        _(schema).pairs().forEach(function(pair) {
            var key = pair[0],
                value = pair[1];
                
            this[key] -= value;
        }, this);

        return schema;
    },

    _enough: function(schema) {
        var pairs = _(schema).pairs();
        return _(pairs).every(function(pair) {
            var key = pair[0],
                value = pair[1];

            return this[key] >= value;
        }, this);
    },

    isValidToBuild: function (price) {
        var variant = Resource.names.reduce(function(acc, name) {
                acc.push(Resource.namesToPrices[name]);
                return acc;
            }, []),
            sum = variant.reduce(function(acc, next) {return acc + next;});

        return sum === price && hasAtLeastThreeDifferentValues(variant);
    }
});


module.exports = ResourceBag;
