var _ = require('underscore'),
    ResourceBag = function (resources) {
        _(this).extend(resources);
    };



var resources = [
        {
            name: 'sand',
            price: 1
        },
        {
            name: 'wood',
            price: 2
        },
        {
            name: 'brick',
            price: 4
        },
        {
            name: 'stone',
            price: 5
        }
    ],
    Resource = {
        names: resources.map(function(r) {return r.name;}),
        prices: resources.map(function(r) {return r.price;}),
        namesToPrices: resources.reduce(function(acc, r) {
            acc[r.name] = r.price;
            return acc;
        }, {}),
        pricesToNames: resources.reduce(function(acc, r) {
            acc[r.price] = r.name;
            return acc;
        }, {})
    };

var singleValues = Resource.prices.sort(function(a, b){return b - a;}),
    hasAtLeastThreeDifferentValues = function(variant) {
        return Object.keys(variant.reduce(function(res, v) {
            res[v] = true;
            return res;
        }, {})).length >= 3;
    };

function getVariantsInner(price, variant, variants, lastValue) {
    if (price === 0 && hasAtLeastThreeDifferentValues(variant)) {
        variants.push(variant);
    } else {
        singleValues.filter(function(value) {
            return value <= price && value <= lastValue;
        }).forEach(function(value) {
            getVariantsInner(price - value, variant.slice().concat(value), variants, value);
        });
    }
    return variants;
}

_(ResourceBag).extend({
    getVariants: function(price) {
        return getVariantsInner(price, [], [], singleValues[0]);
    }
});

_(ResourceBag.prototype).extend({
    take: function (resources) {
        this.subtract(resources);
        return new ResourceBag(resources);
    },
    subtract: function (resources) {
        Object.keys(resources).forEach(function (key) {
            return this[key].subtract(resources[key]);
        }, this);
    },
    isValidToBuild: function (price) {
        var variant = Resource.names.reduce(function(acc, name) {
                acc.push(Resource.namesToPrices[name]);
                return acc;
            }, []),
            sum = variant.reduce(function(acc, next) {return acc + next;});

        return sum === price && hasAtLeastThreeDifferentValues(variant);
    }
});


module.exports = ResourceBag;
